From ed50bbf4c74acbfacd78720105873b26142267d9 Mon Sep 17 00:00:00 2001
From: Violet Purcell <vimproved@inventati.org>
Date: Thu, 26 Oct 2023 23:04:17 -0400
Subject: [PATCH] Remove register storage class

Signed-off-by: Violet Purcell <vimproved@inventati.org>
---
 .../Compiler_double_charactor_operator.cpp    | 232 ++++--------------
 .../util/Compiler_reserved_keyword.cpp        |  10 +-
 .../Compiler_triple_charactor_operator.cpp    |   8 +-
 3 files changed, 57 insertions(+), 193 deletions(-)

diff --git a/src/compiler/util/Compiler_double_charactor_operator.cpp b/src/compiler/util/Compiler_double_charactor_operator.cpp
index c53a6be..dd182fd 100644
--- a/src/compiler/util/Compiler_double_charactor_operator.cpp
+++ b/src/compiler/util/Compiler_double_charactor_operator.cpp
@@ -6,190 +6,54 @@
 
 /* maximum key range = 201, duplicates = 0 */
 
-inline unsigned int DoubleCharactorOperatorMap::hash(register const char *str)
-{
-	static unsigned char asso_values[] = {
-		203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
-		203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
-		203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
-		203, 203, 203,  72, 203, 203,   5,  20,  75,  69,
-		125,  87,   2,  62,  64,  65,  32, 120,  59,  25,
-		47,  37,  54,  49,  44,  39,  34,  24, 110,  19,
-		50,  22,  12,  14,  10,   0,  35,   9,   4, 203,
-		203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
-		203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
-		203, 203, 203, 203,   4, 127, 122, 112,  97, 203,
-		92, 203, 203, 203, 203, 203, 203, 203, 203, 203,
-		203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
-        0, 203, 203, 203,  82, 203,  60, 100,   5, 203,
-		90, 203, 203, 203, 203, 203, 203, 203, 203, 203,
-		203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
-		203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
-		203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
-		203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
-		203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
-		203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
-		203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
-		203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
-		203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
-		203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
-		203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
-		203, 203, 203, 203, 203, 203, 203, 203, 203, 203
-    };
-	return asso_values[(unsigned char)str[1]+4] + asso_values[(unsigned char)str[0]];
+inline unsigned int DoubleCharactorOperatorMap::hash(const char *str) {
+  static unsigned char asso_values[] = {
+      203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
+      203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
+      203, 203, 203, 72,  203, 203, 5,   20,  75,  69,  125, 87,  2,   62,  64,
+      65,  32,  120, 59,  25,  47,  37,  54,  49,  44,  39,  34,  24,  110, 19,
+      50,  22,  12,  14,  10,  0,   35,  9,   4,   203, 203, 203, 203, 203, 203,
+      203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
+      203, 203, 203, 203, 4,   127, 122, 112, 97,  203, 92,  203, 203, 203, 203,
+      203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
+      0,   203, 203, 203, 82,  203, 60,  100, 5,   203, 90,  203, 203, 203, 203,
+      203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
+      203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
+      203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
+      203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
+      203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
+      203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
+      203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
+      203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
+      203, 203, 203, 203, 203};
+  return asso_values[(unsigned char)str[1] + 4] +
+         asso_values[(unsigned char)str[0]];
 }
 
-const char *DoubleCharactorOperatorMap::in_word_set(register const char *str)
-{
-	static const char *double_charactor_operators[] = {
-		"x=",
-		"",
-		"*=",
-		"",
-		"^=",
-		"$=",
-		"",
-		"$&",
-		"",
-		"$@",
-		"$|",
-		"",
-		">=",
-		"",
-		"$?",
-		"$<",
-		"",
-		"$:",
-		"",
-		"$;",
-		"%=",
-		"",
-		"==",
-		"",
-		"$7",
-		"$!",
-		"",
-		"$9",
-		"",
-		"$5",
-		"$-",
-		"",
-		".=",
-		"",
-		"**",
-		"@-",
-		"",
-		"$*",
-		"",
-		"$4",
-		"$>",
-		"",
-		"$/",
-		"",
-		"$3",
-		"%-",
-		"",
-		">>",
-		"",
-		"$2",
-		"<=",
-		"",
-		"$.",
-		"",
-		"$1",
-		"$8",
-		"",
-		"=>",
-		"",
-		"$0",
-		"<<",
-		"",
-		"+=",
-		"",
-		"$,",
-		"-=",
-		"",
-		"$'",
-		"",
-		"$(",
-		"$)",
-		"",
-		"!=",
-		"",
-		"$#",
-		"&=",
-		"",
-		"&&",
-		"",
-		"..",
-		"$\"",
-		"",
-		"|=",
-		"", "",
-		"<>",
-		"",
-		"||",
-		"", "",
-		"--",
-		"",
-		"$%",
-		"", "",
-		"$~",
-		"",
-		"$`",
-		"", "",
-		"->",
-		"",
-		"$^",
-		"", "",
-		"${",
-		"",
-		"%%",
-		"", "",
-		"@{",
-		"",
-		"=~",
-		"", "",
-		"$6",
-		"",
-		"$]",
-		"", "",
-		"%{",
-		"",
-		"::",
-		"", "",
-		"$+",
-		"",
-		"$\\",
-		"", "",
-		"@+",
-		"",
-		"$[",
-		"", "",
-		"@$",
-		"", "", "", "",
-		"%+",
-		"", "", "", "",
-		"%$",
-		"", "", "", "",
-		"~~",
-		"", "", "", "", "", "",
-		"//",
-		"", "", "", "",
-		"!~",
-		"", "", "", "", "", "", "", "", "",
-		"", "", "",
-		"&{",
-		"", "", "", "", "", "",
-		"++",
-		"", "", "", "", "", "", "", "", "",
-		"", "", "", "", "", "", "", "",
-		"&$"
-    };
-	register int key = hash(str);
-	if (key <= DOUBLE_OPERATOR_MAX_HASH_VALUE && key >= 0) {
-		register const char *s = double_charactor_operators[key];
-		if (*str == *s && !strcmp (str + 1, s + 1)) return s;
-	}
-	return 0;
+const char *DoubleCharactorOperatorMap::in_word_set(const char *str) {
+  static const char *double_charactor_operators[] = {
+      "x=", "",   "*=", "",   "^=", "$=", "",   "$&",  "",    "$@", "$|", "",
+      ">=", "",   "$?", "$<", "",   "$:", "",   "$;",  "%=",  "",   "==", "",
+      "$7", "$!", "",   "$9", "",   "$5", "$-", "",    ".=",  "",   "**", "@-",
+      "",   "$*", "",   "$4", "$>", "",   "$/", "",    "$3",  "%-", "",   ">>",
+      "",   "$2", "<=", "",   "$.", "",   "$1", "$8",  "",    "=>", "",   "$0",
+      "<<", "",   "+=", "",   "$,", "-=", "",   "$'",  "",    "$(", "$)", "",
+      "!=", "",   "$#", "&=", "",   "&&", "",   "..",  "$\"", "",   "|=", "",
+      "",   "<>", "",   "||", "",   "",   "--", "",    "$%",  "",   "",   "$~",
+      "",   "$`", "",   "",   "->", "",   "$^", "",    "",    "${", "",   "%%",
+      "",   "",   "@{", "",   "=~", "",   "",   "$6",  "",    "$]", "",   "",
+      "%{", "",   "::", "",   "",   "$+", "",   "$\\", "",    "",   "@+", "",
+      "$[", "",   "",   "@$", "",   "",   "",   "",    "%+",  "",   "",   "",
+      "",   "%$", "",   "",   "",   "",   "~~", "",    "",    "",   "",   "",
+      "",   "//", "",   "",   "",   "",   "!~", "",    "",    "",   "",   "",
+      "",   "",   "",   "",   "",   "",   "",   "&{",  "",    "",   "",   "",
+      "",   "",   "++", "",   "",   "",   "",   "",    "",    "",   "",   "",
+      "",   "",   "",   "",   "",   "",   "",   "",    "&$"};
+  int key = hash(str);
+  if (key <= DOUBLE_OPERATOR_MAX_HASH_VALUE && key >= 0) {
+    const char *s = double_charactor_operators[key];
+    if (*str == *s && !strcmp(str + 1, s + 1))
+      return s;
+  }
+  return 0;
 }
diff --git a/src/compiler/util/Compiler_reserved_keyword.cpp b/src/compiler/util/Compiler_reserved_keyword.cpp
index 8ffa524..c709bbf 100644
--- a/src/compiler/util/Compiler_reserved_keyword.cpp
+++ b/src/compiler/util/Compiler_reserved_keyword.cpp
@@ -39,7 +39,7 @@
 /* maximum key range = 1262, duplicates = 0 */
 
 inline unsigned int
-ReservedKeywordMap::hash (register const char *str, register unsigned int len)
+ReservedKeywordMap::hash (const char *str, unsigned int len)
 {
   static unsigned short asso_values[] =
     {
@@ -70,7 +70,7 @@ ReservedKeywordMap::hash (register const char *str, register unsigned int len)
       1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
       1263, 1263, 1263, 1263, 1263, 1263
     };
-  register int hval = (int)len;
+  int hval = (int)len;
 
   switch (hval)
     {
@@ -92,7 +92,7 @@ ReservedKeywordMap::hash (register const char *str, register unsigned int len)
 }
 
 ReservedKeyword *
-ReservedKeywordMap::in_word_set (register const char *str, register unsigned int len)
+ReservedKeywordMap::in_word_set (const char *str, unsigned int len)
 {
   static ReservedKeyword wordlist[] =
     {
@@ -1160,11 +1160,11 @@ ReservedKeywordMap::in_word_set (register const char *str, register unsigned int
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
     {
-      register int key = hash (str, len);
+      int key = hash (str, len);
 
       if (key <= MAX_HASH_VALUE && key >= 0)
         {
-          register const char *s = wordlist[key].name;
+          const char *s = wordlist[key].name;
 
           if (*str == *s && !strcmp (str + 1, s + 1))
             return &wordlist[key];
diff --git a/src/compiler/util/Compiler_triple_charactor_operator.cpp b/src/compiler/util/Compiler_triple_charactor_operator.cpp
index 9bc07e1..23d211d 100644
--- a/src/compiler/util/Compiler_triple_charactor_operator.cpp
+++ b/src/compiler/util/Compiler_triple_charactor_operator.cpp
@@ -7,7 +7,7 @@
 /* maximum key range = 51, duplicates = 0 */
 
 inline unsigned int
-TripleCharactorOperatorMap::hash(register const char *str)
+TripleCharactorOperatorMap::hash(const char *str)
 {
 	static unsigned char asso_values[] = {
 		54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
@@ -40,7 +40,7 @@ TripleCharactorOperatorMap::hash(register const char *str)
 	return asso_values[(unsigned char)str[2]] + asso_values[(unsigned char)str[0]];
 }
 
-const char *TripleCharactorOperatorMap::in_word_set(register const char *str)
+const char *TripleCharactorOperatorMap::in_word_set(const char *str)
 {
 	static const char * triple_charactor_operators[] = {
 		"||=",
@@ -86,9 +86,9 @@ const char *TripleCharactorOperatorMap::in_word_set(register const char *str)
 		"..."
 	};
 
-	register int key = hash(str);
+	int key = hash(str);
 	if (key <= TRIPLE_OPERATOR_MAX_HASH_VALUE && key >= 0) {
-		register const char *s = triple_charactor_operators[key];
+		const char *s = triple_charactor_operators[key];
 		if (*str == *s && !strcmp (str + 1, s + 1)) return s;
 	}
 	return 0;
-- 
2.42.0

